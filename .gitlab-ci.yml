variables:
  BACKEND_ROOT: ${CI_PROJECT_DIR}/app/backend
  FRONTEND_ROOT: ${CI_PROJECT_DIR}/app/frontend
  GOOSE_ROOT: ${CI_PROJECT_DIR}/app/backend/migrations
  TESTS_ARE_ENABLED: "true"
  CI_REGISTRY: "public.ecr.aws/r0o1i1b8"
  CI_PROJECT_TITLE: "goCovid"

stages:
  - test
  - build

# https://docs.gitlab.com/ee/development/go_guide/#automatic-linting
.lint: &lint
  image: registry.gitlab.com/gitlab-org/gitlab-build-images:golangci-lint-alpine
  stage: test
  script:
    - '[ -e .golangci.yml ] || cp /golangci/.golangci.yml .'
    - golangci-lint run --issues-exit-code 0 --out-format junit-xml > gl-code-quality-report.xml

backend lint:
  extends: .lint
  before_script:
    - cd ${BACKEND_ROOT}
  artifacts:
    reports:
      junit: ${BACKEND_ROOT}/gl-code-quality-report.xml
    paths:
      - ${BACKEND_ROOT}/gl-code-quality-report.xml

frontend lint:
  extends: .lint
  before_script:
    - cd ${FRONTEND_ROOT}
  artifacts:
    reports:
      junit: ${FRONTEND_ROOT}/gl-code-quality-report.xml
    paths:
      - ${FRONTEND_ROOT}/gl-code-quality-report.xml

## Use https://github.com/gotestyourself/gotestsum to generate a JUnit report format XML file with go
backend tests:
  stage: test
  image: golang:stretch
  before_script:
    - cd ${BACKEND_ROOT}
  script:
    - go install gotest.tools/gotestsum@latest
    - gotestsum --junitfile report.xml --format testname
  artifacts:
    when: always
    reports:
      junit: ${BACKEND_ROOT}/report.xml
  only:
    variables:
      - $TESTS_ARE_ENABLED == "true"

## Use https://github.com/gotestyourself/gotestsum to generate a JUnit report format XML file with go
frontend tests:
  stage: test
  image: golang:stretch
  before_script:
    - cd ${FRONTEND_ROOT}
  script:
    - go install gotest.tools/gotestsum@latest
    - gotestsum --junitfile report.xml --format testname
  artifacts:
    when: always
    reports:
      junit: ${FRONTEND_ROOT}/report.xml
  only:
    variables:
      - $TESTS_ARE_ENABLED == "true"

frontend build:
  stage: build
  image: docker:19.03.12
  before_script:
    - cd ${FRONTEND_ROOT}
    - printf "${AWS_REGISTRY_PASSWORD}" | docker login --username AWS --password-stdin public.ecr.aws/r0o1i1b8
    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD}
  script:
    - >
      docker build
      --pull
      --label "org.opencontainers.image.title=$CI_PROJECT_TITLE"
      --label "org.opencontainers.image.version=$CI_COMMIT_REF_NAME"
      --tag $CI_REGISTRY/${BUILD_NAME}:$CI_COMMIT_SHA
      .
    - docker push ${CI_REGISTRY}/${BUILD_NAME}:${CI_COMMIT_SHA}
    - docker tag ${CI_REGISTRY}/${BUILD_NAME}:${CI_COMMIT_SHA} ${CI_REGISTRY}/${BUILD_NAME}:latest
    - docker push ${CI_REGISTRY}/${BUILD_NAME}:latest
  variables:
    BUILD_NAME: app
    CI_REGISTRY: tty8747
  tags:
    - docker.sock

backend build:
  stage: build
  image: docker:19.03.12
  before_script:
    - cd ${BACKEND_ROOT}
    - printf "${AWS_REGISTRY_PASSWORD}" | docker login --username AWS --password-stdin public.ecr.aws/r0o1i1b8
    - printf "${CI_REGISTRY_PASSWORD}" | docker login --username ${CI_REGISTRY_USER} --password-stdin
  script:
    - >
      docker build
      --pull
      --label "org.opencontainers.image.title=$CI_PROJECT_TITLE"
      --label "org.opencontainers.image.version=$CI_COMMIT_REF_NAME"
      --tag $CI_REGISTRY/${BUILD_NAME}:$CI_COMMIT_SHA
      .
    - docker push ${CI_REGISTRY}/${BUILD_NAME}:${CI_COMMIT_SHA}
    - docker tag ${CI_REGISTRY}/${BUILD_NAME}:${CI_COMMIT_SHA} ${CI_REGISTRY}/${BUILD_NAME}:latest
    - docker push ${CI_REGISTRY}/${BUILD_NAME}:latest
  variables:
    BUILD_NAME: api
    CI_REGISTRY: tty8747
  tags:
    - docker.sock

goose build:
  stage: build
  image: docker:19.03.12
  before_script:
    - cd ${GOOSE_ROOT}
    - printf "${AWS_REGISTRY_PASSWORD}" | docker login --username AWS --password-stdin public.ecr.aws/r0o1i1b8
    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD}
  script:
    - >
      docker build
      --pull
      --label "org.opencontainers.image.title=$CI_PROJECT_TITLE"
      --label "org.opencontainers.image.version=$CI_COMMIT_REF_NAME"
      --tag $CI_REGISTRY/${BUILD_NAME}:$CI_COMMIT_SHA
      .
    - docker push ${CI_REGISTRY}/${BUILD_NAME}:${CI_COMMIT_SHA}
    - docker tag ${CI_REGISTRY}/${BUILD_NAME}:${CI_COMMIT_SHA} ${CI_REGISTRY}/${BUILD_NAME}:latest
    - docker push ${CI_REGISTRY}/${BUILD_NAME}:latest
  variables:
    BUILD_NAME: goose
    CI_REGISTRY: tty8747
  tags:
    - docker.sock
