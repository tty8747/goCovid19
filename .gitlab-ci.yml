variables:
  BACKEND_ROOT: ${CI_PROJECT_DIR}/app/backend
  FRONTEND_ROOT: ${CI_PROJECT_DIR}/app/frontend
  GOOSE_ROOT: ${CI_PROJECT_DIR}/app/backend/migrations

stages:
  - test
  - build

# https://docs.gitlab.com/ee/development/go_guide/#automatic-linting
.lint: &lint
  image: registry.gitlab.com/gitlab-org/gitlab-build-images:golangci-lint-alpine
  stage: test
  script:
    - '[ -e .golangci.yml ] || cp /golangci/.golangci.yml .'
    - golangci-lint run --issues-exit-code 0 --out-format junit-xml > gl-code-quality-report.xml

backend lint:
  extends: .lint
  before_script:
    - cd ${BACKEND_ROOT}
  artifacts:
    reports:
      junit: ${BACKEND_ROOT}/gl-code-quality-report.xml

frontend lint:
  extends: .lint
  before_script:
    - cd ${FRONTEND_ROOT}
  artifacts:
    reports:
      codequality: ${FRONTEND_ROOT}/gl-code-quality-report.xml
    paths:
      - ${FRONTEND_ROOT}/gl-code-quality-report.xml

## Use https://github.com/gotestyourself/gotestsum to generate a JUnit report format XML file with go
backend tests:
  stage: test
  image: golang:stretch
  before_script:
    - cd ${BACKEND_ROOT}
  script:
    - go install gotest.tools/gotestsum@latest
    - gotestsum --junitfile report.xml --format testname
  artifacts:
    when: always
    reports:
      junit: ${BACKEND_ROOT}/report.xml

## Use https://github.com/gotestyourself/gotestsum to generate a JUnit report format XML file with go
frontend tests:
  stage: test
  image: golang:stretch
  before_script:
    - cd ${FRONTEND_ROOT}
  script:
    - go install gotest.tools/gotestsum@latest
    - gotestsum --junitfile report.xml --format testname
  artifacts:
    when: always
    reports:
      junit: ${FRONTEND_ROOT}/report.xml

frontend build:
  stage: build
  image: docker:19.03.12
  before_script:
    - cd ${FRONTEND_ROOT}
    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD}
  script:
    - docker build -t tty8747/app:v0.01 .
    - docker push tty8747/app:v0.01
  tags:
    - docker.sock

backend build:
  stage: build
  image: docker:19.03.12
  before_script:
    - cd ${BACKEND_ROOT}
    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD}
  script:
    - docker build -t api:v0.01 .
    - docker tag api:v0.01 tty8747/api:v0.01
    - docker push tty8747/api:v0.01
  tags:
    - docker.sock

goose build:
  stage: build
  image: docker:19.03.12
  before_script:
    - cd ${GOOSE_ROOT}
    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD}
  script:
    - docker build -t tty8747/goose:v0.01 .
    - docker push tty8747/goose:v0.01
  tags:
    - docker.sock
